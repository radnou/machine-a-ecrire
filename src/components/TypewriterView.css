/* Styles Globaux pour la page et la police de base */
body {
    margin: 0;
    background-color: #333; /* Fond sombre pour que la "machine" ressorte */
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    font-family: "Courier Prime", "Courier New", Courier, monospace; /* Police par défaut pour l'app */
    /* La taille de police de base peut être définie ici ou sur html pour que les 'rem' fonctionnent partout */
    font-size: 16px; /* Base pour les unités rem - ajuste si besoin */
  }
  
  /* Le "Viewport" ou la "fenêtre" de la machine à écrire */
  .typewriter-viewport {
    width: 90vw; /* Prend 90% de la largeur de la fenêtre du navigateur */
    max-width: 800px; /* Limite pour les grands écrans, pour garder un aspect contenu */
    height: 80vh; /* Prend 80% de la hauteur */
    max-height: 600px; /* Limite pour la hauteur */
    
    background-color: #5a5a5a; /* Couleur du corps de la machine */
    border: 1px solid #444;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5), inset 0 0 10px rgba(0,0,0,0.3);
    border-radius: 8px;
    
    position: relative; /* Contexte pour le positionnement absolu du papier et du curseur fixe */
    overflow: hidden; /* Crucial: cache les parties du papier qui dépassent */
    
    /* display: flex etc. sont utiles si le paper-sheet est plus petit que le viewport 
       et qu'on veut le centrer à l'intérieur, mais avec le translate, il sera positionné par JS */
  }
  
  /* Le curseur fixe qui reste au "point de frappe" dans le viewport */
  .fixed-cursor-overlay {
    position: absolute;
    /* Positionné par JS via les constantes FIXED_CURSOR_VIEWPORT_X_PERCENT etc.
       Exemple : left: 50%; top: 30%;
       transform: translateX(-50%); est important si width est > 0 pour un vrai centrage horizontal
    */
    /* La taille et la couleur sont définies en JS pour utiliser charWidth/lineHeight mesurés,
       mais on peut mettre des valeurs par défaut ici ou un style de base.
       Exemple pour un curseur bloc '█' (ajuster en JS) :
       width: 10px; 
       height: 20px; 
       background-color: #111;
    */
    background-color: rgba(255, 0, 0, 0.6); /* Couleur de débogage, à styler comme tu veux */
    z-index: 10; /* Doit être au-dessus du papier */
    pointer-events: none; /* Ne pas intercepter les événements souris */
    /* Pour le clignotement, si non géré en JS: */
    /* animation: blink-animation 1s step-start infinite; */
  }
  
  /* Feuille de papier mobile */
  .paper-sheet {
    background-color: #fdfdf8; /* Couleur du papier */
    /* Width, height, padding et transform sont appliqués en JS pour être dynamiques */
    
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2) inset, /* Ombre intérieure pour effet de papier */
                0 2px 5px rgba(0,0,0,0.1); /* Petite ombre portée pour détacher du fond */
    border: 1px solid #ccc; /* Bordure très subtile de la feuille */
    
    position: relative; /* Contexte pour la ligne de marge (::after) */
    box-sizing: border-box;
    
    /* Propriétés de texte héritées par les lignes et caractères */
    font-family: "Courier Prime", "Courier New", Courier, monospace;
    font-size: 1.1rem; /* Taille de police de base pour le texte tapé */
    line-height: 1.8; /* Interligne, important pour LINE_HEIGHT_PX */
    
    /* transition pour le mouvement du papier (peut aussi être géré par GSAP si besoin de plus de contrôle) */
    transition: transform 0.08s linear;
  
    /* Pour que les espaces en début de ligne et multiples espaces soient respectés */
    white-space: pre; /* crucial pour le rendu correct des lignes */
  }
  
  /* Ligne de marge rouge sur le papier */
  .paper-sheet::after {
    content: '';
    position: absolute;
    /* Positionnée par rapport aux bords PADDÉS du papier */
    top: var(--paper-padding-px, 40px); /* Utilise la valeur de padding de JS via variable CSS si possible, sinon fallback */
    bottom: var(--paper-padding-px, 40px);
    /* La position 'right' doit être calculée par rapport au bord droit de la zone de contenu.
       Ex: si la marge est à 7 caractères de la fin et que le padding droit du papier est de 40px:
       right = (padding papier) + (CHARS_IN_BELL_ZONE * charWidth)
       Pour l'instant, valeur fixe à ajuster. 50px du bord du papier-sheet.
    */
    right: var(--paper-margin-line-right-offset-px, 50px); /* */
    width: 1px;
    background-color: rgba(200, 0, 0, 0.4);
    z-index: 1; /* Sous le texte mais sur le papier */
  }
  
  /* Conteneur pour chaque ligne de texte sur le papier */
  .paper-line {
    /* min-height est appliqué en JS via style pour utiliser la valeur de lineHeight mesurée */
    /* white-space: pre-wrap; -- déplacé sur .paper-sheet avec 'pre' */
    /* word-wrap: break-word; -- idem */
    display: flex; /* Pour s'assurer que les span de CaractereFrappe sont bien en ligne */
    align-items: baseline; /* Bon alignement vertical des caractères */
  }
  
  /* Animation de clignotement pour le curseur si géré en CSS */
  /* @keyframes blink-animation {
    50% {
      opacity: 0;
    }
  } */
  
  /* Styles pour le composant CaractereFrappe.css (tu l'as déjà, mais pour référence) */
  .caractere-frappe {
    display: inline-block; /* Important pour GSAP */
    color: #000;
    /* ... autres styles si besoin ... */
  }
  
  .caractere-frappe.space {
     width: 0.5em; /* Si tu veux forcer la largeur de l'espace */
    /* ou simplement &nbsp; qui prendra la largeur d'un caractère normal avec white-space: pre; */
  }